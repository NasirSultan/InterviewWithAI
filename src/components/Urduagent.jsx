import React, { useEffect, useRef, useState } from "react";

const apiKey = "AIzaSyCOHvkgqyBzOebZjKAyx8oVYHzEwxxgQGE";

export default function HindiVoiceAgentForChildren() {
  const [childName, setChildName] = useState("");
  const [listening, setListening] = useState(false);
  const [speaking, setSpeaking] = useState(false);
  const [availableVoices, setAvailableVoices] = useState([]);
  const [selectedVoice, setSelectedVoice] = useState(null);
  const recognitionRef = useRef(null);

  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert("Speech Recognition рд╕рдорд░реНрдерд┐рдд рдирд╣реАрдВ рд╣реИред");
      return;
    }

    const recognition = new SpeechRecognition();
    recognition.lang = "hi-IN";
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.onresult = async (event) => {
      const transcript = event.results[0][0].transcript;
      console.log("ЁЯОЩя╕П рдмрдЪреНрдЪреЗ рдиреЗ рдХрд╣рд╛:", transcript);
      await handleVoicePrompt(transcript);
    };

    recognition.onerror = (e) => {
      console.error("Speech error:", e);
      setListening(false);
    };

    recognition.onend = () => setListening(false);
    recognitionRef.current = recognition;

    const loadVoices = () => {
      const voices = speechSynthesis.getVoices();
      if (voices.length) {
        setAvailableVoices(voices);
        const hindiVoice =
          voices.find((v) => v.lang.toLowerCase().includes("hi")) ||
          voices.find((v) => v.lang.toLowerCase().includes("en-in"));
        setSelectedVoice(hindiVoice);
      } else {
        setTimeout(loadVoices, 200);
      }
    };

    loadVoices();
    window.speechSynthesis.onvoiceschanged = loadVoices;
  }, []);

  const allStories = [
    {
      type: "short",
      text: "рдПрдХ рд▓реЛрдордбрд╝реА рдиреЗ рдЕрдВрдЧреВрд░ рдЦрд╛рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХреА, рд▓реЗрдХрд┐рди рдирд╣реАрдВ рдкрд╣реБрдВрдЪ рд╕рдХреАред рдЙрд╕рдиреЗ рдХрд╣рд╛, 'рдпреЗ рдЕрдВрдЧреВрд░ рдЦрдЯреНрдЯреЗ рд╣реИрдВред' рд╕реАрдЦ: рдЬреЛ рдЪреАрдЬрд╝ рд╣рдореЗрдВ рдирд╣реАрдВ рдорд┐рд▓рддреА, рдЙрд╕реЗ рдмреБрд░рд╛ рдХрд╣рдирд╛ рдареАрдХ рдирд╣реАрдВред"
    },
    {
      type: "short",
      text: "рдПрдХ рдЦрд░рдЧреЛрд╢ рдФрд░ рдХрдЫреБрдЖ рд░реЗрд╕ рд▓рдЧрд╛рддреЗ рд╣реИрдВред рдЦрд░рдЧреЛрд╢ рддреЗрдЬрд╝ рдерд╛ рдкрд░ рд╕реЛ рдЧрдпрд╛, рдХрдЫреБрдЖ рд▓рдЧрд╛рддрд╛рд░ рдЪрд▓рддрд╛ рд░рд╣рд╛ рдФрд░ рдЬреАрдд рдЧрдпрд╛ред рд╕реАрдЦ: рдореЗрд╣рдирдд рд╕реЗ рд╕рдлрд▓рддрд╛ рдорд┐рд▓рддреА рд╣реИред"
    },
    {
      type: "medium",
      text: "рдПрдХ рджрд┐рди рдПрдХ рд╢реЗрд░ рдЬрдВрдЧрд▓ рдореЗрдВ рд╕реЛ рд░рд╣рд╛ рдерд╛ред рдПрдХ рдЪреВрд╣рд╛ рдЙрд╕рдХреЗ рдКрдкрд░ рджреМрдбрд╝ рдЧрдпрд╛ред рд╢реЗрд░ рдиреЗ рдЙрд╕реЗ рдкрдХрдбрд╝ рд▓рд┐рдпрд╛ рд▓реЗрдХрд┐рди рдЙрд╕реЗ рдЫреЛрдбрд╝ рджрд┐рдпрд╛ред рдХреБрдЫ рджрд┐рдиреЛрдВ рдмрд╛рдж рд╢рд┐рдХрд╛рд░реА рдиреЗ рд╢реЗрд░ рдХреЛ рдЬрд╛рд▓ рдореЗрдВ рдлрдВрд╕рд╛ рд▓рд┐рдпрд╛ред рд╡рд╣реА рдЪреВрд╣рд╛ рдЖрдпрд╛ рдФрд░ рдЬрд╛рд▓ рдХрд╛рдЯрдХрд░ рд╢реЗрд░ рдХреЛ рдмрдЪрд╛ рд▓рд┐рдпрд╛ред рд╕реАрдЦ: рдХреЛрдИ рднреА рдЫреЛрдЯрд╛ рдирд╣реАрдВ рд╣реЛрддрд╛, рдорджрдж рдХрднреА рднреА рдХрд╛рдо рдЖ рд╕рдХрддреА рд╣реИред"
    },
    {
      type: "medium",
      text: "рдПрдХ рдмрд╛рд░ рджреЛ рджреЛрд╕реНрдд рдЬрдВрдЧрд▓ рд╕реЗ рдЬрд╛ рд░рд╣реЗ рдереЗред рдЙрдиреНрд╣реЗрдВ рдПрдХ рднрд╛рд▓реВ рдорд┐рд▓ рдЧрдпрд╛ред рдПрдХ рдкреЗрдбрд╝ рдкрд░ рдЪрдврд╝ рдЧрдпрд╛ рдФрд░ рджреВрд╕рд░рд╛ рдЬрд╝рдореАрди рдкрд░ рд▓реЗрдЯ рдЧрдпрд╛ред рднрд╛рд▓реВ рдЙрд╕рдХреЗ рдкрд╛рд╕ рдЖрдпрд╛, рд╕реВрдВрдШрд╛ рдФрд░ рдЪрд▓рд╛ рдЧрдпрд╛ред рджреЛрд╕реНрдд рдиреАрдЪреЗ рдЖрдпрд╛ рдФрд░ рдкреВрдЫрд╛, рднрд╛рд▓реВ рдиреЗ рдХреНрдпрд╛ рдХрд╣рд╛? рдЙрд╕рдиреЗ рдХрд╣рд╛, 'рдЕрд╕рд▓реА рджреЛрд╕реНрдд рд╡рд╣реА рд╣реИ рдЬреЛ рд╕рдВрдХрдЯ рдореЗрдВ рд╕рд╛рде рджреЗред' рд╕реАрдЦ: рд╕рдЪреНрдЪрд╛ рджреЛрд╕реНрдд рдореБрд╕реАрдмрдд рдореЗрдВ рдкрд╣рдЪрд╛рдирд╛ рдЬрд╛рддрд╛ рд╣реИред"
    },
    {
      type: "long",
      text: "рдмрд╣реБрдд рд╕рдордп рдкрд╣рд▓реЗ рдХреА рдмрд╛рдд рд╣реИ, рдПрдХ рдЧрд╛рдБрд╡ рдореЗрдВ рдПрдХ рдЧрд░реАрдм рд▓рдХрдбрд╝рд╣рд╛рд░рд╛ рд░рд╣рддрд╛ рдерд╛ред рд╡рд╣ рд░реЛрдЬрд╝ рдЬрдВрдЧрд▓ рдЬрд╛рддрд╛ рдФрд░ рд▓рдХрдбрд╝рд┐рдпрд╛рдБ рдХрд╛рдЯрдХрд░ рдЙрдиреНрд╣реЗрдВ рдмреЗрдЪрддрд╛ред рдПрдХ рджрд┐рди рдЙрд╕рдХреА рдХреБрд▓реНрд╣рд╛рдбрд╝реА рдирджреА рдореЗрдВ рдЧрд┐рд░ рдЧрдИред рд╡рд╣ рдмрд╣реБрдд рджреБрдЦреА рд╣реБрдЖред рддрднреА рдЬрд▓ рдХреА рджреЗрд╡реА рдкреНрд░рдХрдЯ рд╣реБрдИрдВ рдФрд░ рд╕реЛрдиреЗ рдХреА рдХреБрд▓реНрд╣рд╛рдбрд╝реА рджрд┐рдЦрд╛рдХрд░ рдкреВрдЫрд╛ рдХреНрдпрд╛ рдпрд╣ рддреБрдореНрд╣рд╛рд░реА рд╣реИ? рд▓рдХрдбрд╝рд╣рд╛рд░реЗ рдиреЗ рдХрд╣рд╛ рдирд╣реАрдВред рдлрд┐рд░ рдЪрд╛рдВрджреА рдХреА рдХреБрд▓реНрд╣рд╛рдбрд╝реА рджрд┐рдЦрд╛рдИ, рдЙрд╕рдиреЗ рдлрд┐рд░ рд╕реЗ рдордирд╛ рдХрд┐рдпрд╛ред рдЕрдВрдд рдореЗрдВ рдЙрд╕рдХреА рд▓реЛрд╣реЗ рдХреА рдХреБрд▓реНрд╣рд╛рдбрд╝реА рджрд┐рдЦрд╛рдИ, рддрдм рдЙрд╕рдиреЗ рдХрд╣рд╛ рд╣рд╛рдВ рдпреЗ рдореЗрд░реА рд╣реИред рджреЗрд╡реА рдЙрд╕рдХреА рдИрдорд╛рдирджрд╛рд░реА рд╕реЗ рдЦреБрд╢ рд╣реБрдИрдВ рдФрд░ рддреАрдиреЛрдВ рдХреБрд▓реНрд╣рд╛рдбрд╝рд┐рдпрд╛рдБ рдЙрд╕реЗ рджреЗ рджреАрдВред рд╕реАрдЦ: рдИрдорд╛рдирджрд╛рд░реА рдХрд╛ рд╣рдореЗрд╢рд╛ рдЗрдирд╛рдо рдорд┐рд▓рддрд╛ рд╣реИред"
    },
    {
      type: "long",
      text: "рдПрдХ рд╕рдордп рдХреА рдмрд╛рдд рд╣реИ, рдПрдХ рд░рд╛рдЬрд╛ рдХреЛ рдЕрдкрдиреЗ рд░рд╛рдЬреНрдп рдХреЗ рдпреБрд╡рд░рд╛рдЬ рдХреЛ рдЙрддреНрддрд░рд╛рдзрд┐рдХрд╛рд░реА рдмрдирд╛рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдЙрд╕рдХреА рдкрд░реАрдХреНрд╖рд╛ рд▓реЗрдиреА рдереАред рд░рд╛рдЬрд╛ рдиреЗ рдЙрд╕реЗ рдПрдХ рд╕рд╛рд▓ рдХреЗ рд▓рд┐рдП рд╕рд╛рдзреБ рдмрдирд╛рдХрд░ рдЬрдВрдЧрд▓ рднреЗрдЬ рджрд┐рдпрд╛ред рд╡рд╣рд╛рдВ рдпреБрд╡рд░рд╛рдЬ рдиреЗ рд╕рддреНрдп, рдкрд░рд┐рд╢реНрд░рдо рдФрд░ рд╕реЗрд╡рд╛ рдХреЗ рдЧреБрдг рд╕реАрдЦреЗред рдЬрдм рд╡рд╣ рд▓реМрдЯрд╛, рддреЛ рд╡рд╣ рд╡рд┐рдирдореНрд░ рдФрд░ рдмреБрджреНрдзрд┐рдорд╛рди рдмрди рдЧрдпрд╛ред рд░рд╛рдЬрд╛ рдиреЗ рдЙрд╕реЗ рд░рд╛рдЬрдЧрджреНрджреА рджреАред рд╕реАрдЦ: рд╕рдЪреНрдЪреЗ рдиреЗрддрд╛ рдореЗрдВ рд╕реЗрд╡рд╛, рд╕рдВрдпрдо рдФрд░ рд╕рдордЭрджрд╛рд░реА рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред"
    }
  ];

  const getRandomStory = () => {
    const index = Math.floor(Math.random() * allStories.length);
    return allStories[index].text;
  };

  const handleVoicePrompt = async (text) => {
    stopSpeaking();

    if (!childName.trim()) {
      const story = getRandomStory();
      speak(`рдЪрд▓рд┐рдП рдПрдХ рдХрд╣рд╛рдиреА рд╕реБрдирддреЗ рд╣реИрдВред ${story}`);
      return;
    }

    const prompt = `"${childName}" рдирд╛рдордХ рдмрдЪреНрдЪреЗ рдХреЛ рд╣рд┐рдВрджреА рдореЗрдВ рдПрдХ рджреЛрд╕реНрддрд╛рдирд╛, рд╕рдХрд╛рд░рд╛рддреНрдордХ рдФрд░ рд╕рд░рд▓ рд╕рд▓рд╛рд╣ рджреЗрдВред рд╕рд▓рд╛рд╣ рдореЗрдВ рдЙрд╕рдХрд╛ рдирд╛рдо рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ рдФрд░ рдЙрд╕реЗ рдкреНрд░реЗрд░рд┐рдд рдХрд░реЗрдВред рдмрдЪреНрдЪреЗ рдиреЗ рдкреВрдЫрд╛: "${text}"`;

    try {
      const res = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ contents: [{ parts: [{ text: prompt }] }] }),
        }
      );

      const data = await res.json();
      const reply = data?.candidates?.[0]?.content?.parts?.[0]?.text || "рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдХреЛрдИ рд╕рд▓рд╛рд╣ рдирд╣реАрдВ рдорд┐рд▓ рд╕рдХреАред";
      const personalizedReply = `${childName}, ${reply}`;
      console.log("ЁЯСж Personalized:", personalizedReply);
      speak(personalizedReply);
    } catch (error) {
      console.error("Gemini API error:", error);
      speak(`${childName}, рдорд╛рдлрд╝ рдХреАрдЬрд┐рдП, рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реЛ рдЧрдИ рд╣реИред`);
    }
  };

  const speak = (text) => {
    const utterance = new SpeechSynthesisUtterance(text);
    const voices = window.speechSynthesis.getVoices();
    const voiceToUse =
      selectedVoice ||
      voices.find((v) => v.lang === "hi-IN") ||
      voices.find((v) => v.lang === "en-IN");

    if (voiceToUse) {
      utterance.voice = voiceToUse;
      utterance.lang = voiceToUse.lang;
    } else {
      utterance.lang = "hi-IN";
    }

    utterance.onend = () => setSpeaking(false);
    setSpeaking(true);
    speechSynthesis.speak(utterance);
  };

  const stopSpeaking = () => {
    speechSynthesis.cancel();
    setSpeaking(false);
  };

  const startListening = () => {
    if (recognitionRef.current && !listening && !speaking) {
      setListening(true);
      recognitionRef.current.start();
    }
  };

  const tellStoryManually = () => {
    const story = getRandomStory();
    speak(`рдЪрд▓рд┐рдП рдПрдХ рдХрд╣рд╛рдиреА рд╕реБрдирддреЗ рд╣реИрдВред ${story}`);
  };

  return (
    <div className="min-h-screen bg-yellow-100 text-black flex flex-col items-center justify-center px-4 py-8">
      <h1 className="text-3xl font-bold mb-6 text-center">ЁЯСзЁЯзТ рд╣рд┐рдВрджреА рдмрдЪреНрдЪреЛрдВ рдХреА рдЖрд╡рд╛рдЬрд╝ рд╕рд╣рд╛рдпрдХ</h1>

      <input
        type="text"
        value={childName}
        onChange={(e) => setChildName(e.target.value)}
        placeholder="рдмрдЪреНрдЪреЗ рдХрд╛ рдирд╛рдо рд▓рд┐рдЦреЗрдВ (рд╡реИрдХрд▓реНрдкрд┐рдХ)"
        className="mb-4 p-2 text-lg rounded border border-gray-400 text-black"
      />

      <div className="flex flex-col gap-4 items-center">
        <button
          onClick={startListening}
          disabled={listening || speaking}
          className="bg-green-600 px-6 py-3 text-xl rounded shadow hover:bg-green-700 transition"
        >
          ЁЯОд {listening ? "рд╕реБрди рд░рд╣реЗ рд╣реИрдВ..." : "рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ"}
        </button>

        <button
          onClick={stopSpeaking}
          className="bg-red-600 px-6 py-3 text-xl rounded shadow hover:bg-red-700 transition"
        >
          ЁЯФЗ рдЖрд╡рд╛рдЬрд╝ рдмрдВрдж рдХрд░реЗрдВ
        </button>

        <button
          onClick={tellStoryManually}
          className="bg-blue-600 px-6 py-3 text-xl rounded shadow hover:bg-blue-700 transition"
        >
          ЁЯУЦ рд╕реБрдирд╛рдУ рдПрдХ рдХрд╣рд╛рдиреА
        </button>

        <div className="mt-4">
          <label className="block text-sm mb-1">ЁЯФИ рдЖрд╡рд╛рдЬрд╝ рдЪреБрдиреЗрдВ:</label>
          <select
            value={selectedVoice?.name || ""}
            onChange={(e) => {
              const voice = availableVoices.find((v) => v.name === e.target.value);
              setSelectedVoice(voice);
            }}
            className="text-black p-2 rounded"
          >
            {availableVoices.map((voice) => (
              <option key={voice.name} value={voice.name}>
                {voice.name} ({voice.lang})
              </option>
            ))}
          </select>
        </div>
      </div>
    </div>
  );
}
